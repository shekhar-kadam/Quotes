{"ast":null,"code":"const FIREBASE_DOMAIN = \"https://quote-ea24d-default-rtdb.firebaseio.com\"; // get Requests \n// for geting the all quotes \n\nexport async function getAllQuote() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n; // for  getting the single quote \n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'could not fetch quotes');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n} // for getiing the comments \n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'could not fetch Comments');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n} // Post Request \n// for sending the quotes \n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not Create Quotes');\n  }\n\n  return null;\n} // for adding the comment data \n// export async function addComment( commentData, quoteId ) {\n//     const response = await fetch( `${ FIREBASE_DOMAIN }/comments/${ quoteId }.json`, {\n//         method: 'POST',\n//         body: JSON.stringify( commentData ),\n//         headers: {\n//             'Content-Type': 'application/json',\n//         },\n//     } );\n//     const data = await response.json();\n//     if ( !response.ok ) {\n//         throw new Error( data.message || 'Could not add comment' );\n//     }\n//     return null;\n// }\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return {\n    commentId: data.name\n  };\n}","map":{"version":3,"sources":["C:/Users/Tec/Desktop/prac__route/src/lib/api.js"],"names":["FIREBASE_DOMAIN","getAllQuote","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","getAllComments","transformedComments","commentObj","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name"],"mappings":"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","sourcesContent":["const FIREBASE_DOMAIN = \"https://quote-ea24d-default-rtdb.firebaseio.com\";\r\n\r\n\r\n// get Requests \r\n\r\n// for geting the all quotes \r\n\r\nexport async function getAllQuote() {\r\n    const response = await fetch( `${ FIREBASE_DOMAIN }/quotes.json` );\r\n    const data = await response.json();\r\n\r\n    if ( !response.ok ) {\r\n        throw new Error(data.message || 'Could not fetch quotes.');\r\n    }\r\n\r\n    const transformedQuotes = [];\r\n\r\n    for ( const key in data ) {\r\n        const quoteObj = {\r\n            id: key,\r\n            ...data[key]\r\n        }\r\n     transformedQuotes.push( quoteObj );\r\n    }\r\n    return transformedQuotes;\r\n};\r\n\r\n// for  getting the single quote \r\n\r\nexport async function getSingleQuote(quoteId) {\r\n    const response = await fetch( `${ FIREBASE_DOMAIN }/quotes/${ quoteId }.json` );\r\n\r\n    const data = await response.json();\r\n\r\n    if ( !response.ok ) {\r\n        throw new Error( data.message || 'could not fetch quotes' );\r\n    }\r\n\r\n    const loadedQuote = {\r\n        id: quoteId,\r\n        ...data\r\n    }\r\n\r\n    return loadedQuote;\r\n}\r\n\r\n\r\n// for getiing the comments \r\n\r\nexport async function getAllComments( quoteId ) {\r\n    const response = await fetch( `${ FIREBASE_DOMAIN }/comments/${ quoteId }.json` );\r\n\r\n    const data = await response.json();\r\n\r\n    if ( !response.ok ) {\r\n        throw new Error( data.message || 'could not fetch Comments' );\r\n    }\r\n\r\n    const transformedComments = [];\r\n\r\n    for ( const key in data ) {\r\n        const commentObj = {\r\n            id: key,\r\n            ...data[key]\r\n        }\r\n        transformedComments.push( commentObj );\r\n    }\r\n\r\n    return transformedComments;\r\n}\r\n\r\n// Post Request \r\n\r\n\r\n// for sending the quotes \r\n\r\nexport async function addQuote( quoteData ) {\r\n    const response = await fetch( `${ FIREBASE_DOMAIN }/quotes.json`, {\r\n        method: 'POST',\r\n        body: JSON.stringify( quoteData ),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    } );\r\n\r\n    const data = await response.json();\r\n\r\n    if ( !response.ok ) {\r\n        throw new Error( data.message || 'Could not Create Quotes' );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n// for adding the comment data \r\n\r\n// export async function addComment( commentData, quoteId ) {\r\n//     const response = await fetch( `${ FIREBASE_DOMAIN }/comments/${ quoteId }.json`, {\r\n//         method: 'POST',\r\n//         body: JSON.stringify( commentData ),\r\n//         headers: {\r\n//             'Content-Type': 'application/json',\r\n//         },\r\n//     } );\r\n\r\n//     const data = await response.json();\r\n\r\n//     if ( !response.ok ) {\r\n//         throw new Error( data.message || 'Could not add comment' );\r\n//     }\r\n\r\n//     return null;\r\n// }\r\n\r\n\r\nexport async function addComment(requestData) {\r\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestData.commentData),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    const data = await response.json();\r\n  \r\n    if (!response.ok) {\r\n      throw new Error(data.message || 'Could not add comment.');\r\n    }\r\n  \r\n    return { commentId: data.name };\r\n  }"]},"metadata":{},"sourceType":"module"}